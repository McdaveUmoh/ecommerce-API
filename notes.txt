# Mockaroo.com is a site for creating dummy texts
# look up queryset API on google to get all the list of queries you can make
# look up django database functions to help with exploring more funtions
# To create a new user -> python manage.py createsuperuser
# to change password -> python manage.py changepassword admin(being the username)

    def __str__(self):
        return self.title

    class Meta:
        ordering = ["title"]


admin.site.site_header = 'Store Admin'
admin.site.index_title = 'Admin'

#pipenv install to install dependencies in the project
# django modeladmin to help the complete list of customizable changes we can make
# django validators for built-in validators
#RESTFUL is short for Representational State Transfer what basically makes an application restful
 are RESOURCES, REPRESENTATIONS, HTTP METHODS
# pipenv install djangorestframework then include it in your INSTALLED_APPS
# pipenv shell to run the virtual environment
#  . /home/mcdave/Codes/django\ projects/ecommerce-API-master/ecommerce-api/bin/activate
# django comes with HttpResponse and HttpRequest while djangorestframework comes with Request and Response
# ModelSerializers
# httpstatuses.com
# django-rest-framework.org
# a generic view is a concrete class that combines one or more mixin and provides handler methods  like get and post
# drf-nested-routers on github
# pipenv install drf-nested-routers this for embedding routers in other routes with parameters
# kwargs is dictionary that contains our url parameters
# pipenv install django-filter for generic filtering instead of customizing multiple filterings
# after installing a library always add it to your INSTALLED_APPS
# ensure to always create a new user table when starting out your project to avoid dropping your entire DB
# djoser is the restful implementation of django auth system
#token-based auth validates token against DB on every request vs JSON Web token auth uses digital signature on the server to validate tokens
# store token: add Authorization in the first column then JWT followed by the token in the next
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ1MzM0ODE1LCJpYXQiOjE3NDQ5MDI4MTUsImp0aSI6IjgyZmRkNjgxNzM5NDQyYzQ5NWExMDY4YzE5ZDVkNmMyIiwidXNlcl9pZCI6NH0.qVj--eKCaDXiuF_-KxiGW6jd_7sg_wWgZE2lCSiADsg
#staff Smith
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQ1NTk2NDE0LCJpYXQiOjE3NDUxNjQ0MTQsImp0aSI6ImNmODkyYzBlOTQxZjQzNmI5NTIzZTE2ZTkzZWUzY2QyIiwidXNlcl9pZCI6Mn0.Q2WYAXTg3mqxb8Vv-DR2ZV2AjzAinBXkvwgccLh5z38
#jwt.io to validate  web tokens for django
#always create groups add users to groups so you can easily keep track of who has what permissions
#transactions in Django to treat a bunch of actions as atomic where they all run or dont prevent data loss in the process
#when your overwrite the get query method on a viewset you have to set a basename in the routers url
#when including another serializer to a serialzer ensure you indicate if the many is true or not base on how you described your relationship in the database
#SMTP (Simple Mail Transfer Protocol) you can use fake smtp servers during development like "smtp4dev" and uses port 5000 to view the admin interface
#sudo docker run --rm -it -p 3000:80 -p 2525:25 rnwood/smtp4dev
#Docker is a platform for shipping and running software
#Email Backends in Django SMTP, Console, File, Locmem, Dummy
#Django-templated-email for sending dynamic emails
#Celeryproject.org for running background tasks and it can be scheduled to be run periodic tasks i.e like every monday
#Message brokers are responsible for handling requests/message between apps in a reliable way
#Popular brokers for django are [redis (in-memory data store) + cache] and rabbitMQ
#pipenv install redis then use docker to run it in a container "sudo docker run -d -p 6380:6379 redis"
#sudo docker ps to see the list of services docker is running
#celery -A  storefront worker --loglevel=info
#take note we can use docker to run all the terminals simutaneously with docker=compose up
#pipenv install flower to help monitor task
#when it comes to automated testing you should sought out to test the behaviour of your code and not each and every implementation of the the code like each view, model, serializer etc.
# use pytest for testing your applications as ir requires lesser boilerplates as compared to unittest and a better community and plugins  run "pipenv install --dev pytest then install pytest-django"
#always check to see if your test is checking for the right condition bby commenting out the actual condition required for the test to succeed
#to skip a test we use @pytest.mark.skip
#for continous testing we need to install a plugin called pytest-watch in development mode then use "ptw" to continously test your code for changes
#pipenv install --dev model-bakery for randomly generating data required based of the data type
#print statement don't work while writing test except when the tests fail
#performance testing you can use locust by installing it with pipenv install locust
# to run a locust script locust -f locustfiles/browseproducts.py
#
#
#
#
#
#
#
#
#
#
#
#
#
#1:33:22

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'storefront',
        'USERNAME': 'mcdave',
        'HOST': 'localhost',
        'PASSWORD': 'umoh@199629'
    }
}